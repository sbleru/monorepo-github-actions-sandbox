name: a Dev

on:
  push:
    paths:
      - ".github/workflows/a-*"
      - "packages/a/**"
  workflow_dispatch:

env:
  # キャッシュをリセットしたいときはインクリメントする
  cache-version: v1

defaults:
  run:
    shell: bash
    working-directory: ./

jobs:
  test:
    name: Run Dev
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          # これはnode_modulesをキャッシュしない
          # cache: 'npm'
          # cache-dependency-path: '**/package-lock.json'

      # キャッシュ対象のdirectoryを取得
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      # キャッシュ
      - name: Cache npm dir
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          # @see https://docs.github.com/ja/actions/using-workflows/caching-dependencies-to-speed-up-workflows#using-contexts-to-create-cache-keys
          key: ${{ env.cache-version }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 「Cache npm dir」では、node_modulesはキャッシュされないのでキャッシュがあっても実行する
      # リモートから取得しないためちょっと早くなる
      # nodeバージョンが変わると壊れるのでnode_modulesをキャッシュしないのが推奨らしい
      # @see https://github.com/actions/cache/blob/main/examples.md#node---npm
      # - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      - name: Setup root
        run: |
          npm ci --ignore-scripts

      - name: Run dev
        run: |
          cd packages/a
          npm run dev
